import { OnTransactionHandler } from '@metamask/snap-types';
import { hasProperty, isObject, Json } from '@metamask/utils';
import { decodeContractCall } from '@ethereum-sourcify/contract-call-decoder';
import { utils } from 'ethers';

export const onTransaction: OnTransactionHandler = async ({
  transaction,
  chainId,
}) => {
  const insights: { type: string; params?: Json } = {
    type: 'Unknown Transaction Type',
  };

  if (
    !isObject(transaction) ||
    !hasProperty(transaction, 'data') ||
    typeof transaction.data !== 'string'
  ) {
    console.warn('Unknown Transaction Type');
    return { insights };
  }

  const { to, data } = transaction;
  const toAddress = utils.getAddress(to as string);
  console.log(toAddress);

  const chainIdInt = parseInt(chainId.replace('eip155:', ''), 16);

  // example
  // const tx = {
  //   to: '0x05c99480624597944e50515a86d1Ec1aD63f23e6',
  //   data: '0x1cf9504d00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000046369616f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000046369616f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000046369616f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000046369616f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000046369616f00000000000000000000000000000000000000000000000000000000',
  // };

  const decodedObj = await decodeContractCall(
    { to: toAddress, data },
    { chainId: chainIdInt },
  );

  console.log(decodedObj);

  const { contract, method } = decodedObj;
  const { notice, selector } = method;

  console.log(contract, method);

  return {
    insights: {
      selector,
      notice,
    },
  };
};
